// <auto-generated />
using BookCave.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace BookCave.Migrations
{
    [DbContext(typeof(AuthenticationDbContext))]
    [Migration("20180507152203_3NF_Conversion4")]
    partial class _3NF_Conversion4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookCave.Data.EntityModels.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BillingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<int>("CountryId");

                    b.Property<string>("StateOrProvince");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("BillingAddress");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BookFormatId");

                    b.Property<string>("Description");

                    b.Property<double>("Discount");

                    b.Property<string>("ISBN10");

                    b.Property<string>("ISBN13");

                    b.Property<string>("Image");

                    b.Property<double>("Price");

                    b.Property<string>("Publisher");

                    b.Property<double>("Rating");

                    b.Property<int>("ReleaseYear");

                    b.Property<int>("StockCount");

                    b.Property<string>("Title");

                    b.Property<bool>("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("BookFormatId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BookAuthors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<int>("BookId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BookGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookId");

                    b.Property<int>("GenreId");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BookLanguages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookId");

                    b.Property<int>("LanguageId");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("LanguageId");

                    b.ToTable("BookLanguages");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.CardDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CardNumber");

                    b.Property<int>("Cvc");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CardDetails");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("OrderId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUsersId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Formats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Formats");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("BillingAddressId");

                    b.Property<int>("CardDetailsId");

                    b.Property<int>("OrderBooksId");

                    b.Property<DateTime>("OrderDate");

                    b.Property<double>("OrderPrice");

                    b.Property<bool>("OrderStatus");

                    b.Property<int>("ShippingAddressId");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUsersId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.OrderBooks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookId");

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderBooks");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.OrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUsersId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderHistory");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.OwnedBooks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("BookId");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUsersId");

                    b.HasIndex("BookId");

                    b.ToTable("OwnedBooks");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.ReadBooks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("BookId");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUsersId");

                    b.HasIndex("BookId");

                    b.ToTable("ReadBooks");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("BookId");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Edited");

                    b.Property<int>("NegativeScore");

                    b.Property<int>("PositiveScore");

                    b.Property<double>("Rating");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUsersId");

                    b.HasIndex("BookId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.ShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<int>("CountryId");

                    b.Property<string>("StateOrProvince");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("ShippingAddress");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.UserBillingAddresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<string>("AspNetUsersId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AspNetUsersId");

                    b.ToTable("UserBillingAddresses");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.UserCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("CardId");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUsersId");

                    b.HasIndex("CardId");

                    b.ToTable("UserCards");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.UserReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("ReviewId");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUsersId");

                    b.HasIndex("ReviewId");

                    b.ToTable("UserReviews");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.UserShippingAddresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<string>("AspNetUsersId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AspNetUsersId");

                    b.ToTable("UserShippingAddresses");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("BookId");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUsersId");

                    b.HasIndex("BookId");

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.AspNetUsers", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("ActiveStatus");

                    b.Property<bool>("BookSuggestionsEmail");

                    b.Property<int>("FavoriteAuthorId");

                    b.Property<int>("FavoriteBookId");

                    b.Property<string>("Image");

                    b.Property<DateTime>("LastLoggedInDate");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int>("TotalBans");

                    b.Property<int>("TotalReports");

                    b.Property<int>("UserGroup");

                    b.HasIndex("FavoriteAuthorId");

                    b.HasIndex("FavoriteBookId");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator().HasValue("AspNetUsers");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BillingAddress", b =>
                {
                    b.HasOne("BookCave.Data.EntityModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Book", b =>
                {
                    b.HasOne("BookCave.Data.EntityModels.Formats", "BookFormat")
                        .WithMany()
                        .HasForeignKey("BookFormatId");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BookAuthors", b =>
                {
                    b.HasOne("BookCave.Data.EntityModels.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookCave.Data.EntityModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BookGenre", b =>
                {
                    b.HasOne("BookCave.Data.EntityModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookCave.Data.EntityModels.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.BookLanguages", b =>
                {
                    b.HasOne("BookCave.Data.EntityModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookCave.Data.EntityModels.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Feedback", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("AspNetUsersId");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Order", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("AspNetUsersId");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.OrderBooks", b =>
                {
                    b.HasOne("BookCave.Data.EntityModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookCave.Data.EntityModels.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.OrderHistory", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("AspNetUsersId");

                    b.HasOne("BookCave.Data.EntityModels.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.OwnedBooks", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("AspNetUsersId");

                    b.HasOne("BookCave.Data.EntityModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.ReadBooks", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("AspNetUsersId");

                    b.HasOne("BookCave.Data.EntityModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Review", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("AspNetUsersId");

                    b.HasOne("BookCave.Data.EntityModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.ShippingAddress", b =>
                {
                    b.HasOne("BookCave.Data.EntityModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.UserBillingAddresses", b =>
                {
                    b.HasOne("BookCave.Data.EntityModels.BillingAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("AspNetUsersId");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.UserCards", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("AspNetUsersId");

                    b.HasOne("BookCave.Data.EntityModels.CardDetails", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.UserReview", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("AspNetUsersId");

                    b.HasOne("BookCave.Data.EntityModels.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.UserShippingAddresses", b =>
                {
                    b.HasOne("BookCave.Data.EntityModels.ShippingAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("AspNetUsersId");
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.Wishlist", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUsers")
                        .WithMany()
                        .HasForeignKey("AspNetUsersId");

                    b.HasOne("BookCave.Data.EntityModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCave.Data.EntityModels.AspNetUsers", b =>
                {
                    b.HasOne("BookCave.Data.EntityModels.Author", "FavoriteAuthor")
                        .WithMany()
                        .HasForeignKey("FavoriteAuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookCave.Data.EntityModels.Book", "FavoriteBook")
                        .WithMany()
                        .HasForeignKey("FavoriteBookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
