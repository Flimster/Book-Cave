1.

As things stand with the db all <List>'s in the .cs files in Data/EntityModels 
create a ForeignKey reference to the table that the <List> is coming from. 

Example: List<Author> in Book.cs creates a column called BookId in the table
Author with a FK reference to Book(Id). 
This is not what we want. Because now Author has BookId which MUST always have
VALID Id from Book(Id), which makes no sense since one Author can write many Books.

Possible solution: Third normal form table structure. It would looks like this.

TABLE1       TABLE2      {TABLE 2 DATA                   }       TABLE3
       
Book(Id)---> BookAuthors{ Id                               <----Author(Id)
                          BookId (ForeignKey REF. to Book)
                          AuthorId (FK REF. to Author) }


Tyler's solution: All <List> are removed from the classes. Instead there
will be a "middle" table containing the ID of Table A which can have many
items from Table B. By using a LINQ query with a JOIN statement see:
https://www.w3schools.com/sql/sql_join.asp
Also check out Inner, Left, Right joins.
This way we can create a LINQ().ToList(); which will compare the Id's and
put them into a single table. 

TABLE2 would serve two needs. In the case of when a Book has more than one Author,
this table would be an easy way to link more than a single Author to a book.
Case two would be if we want a list of all books created by Author X. All we need
to do is look for Author X's (Id) in TABLE2, which would give us a list of all the
(Id)'s of books he has written. Again LINQ Join would be used to get a table with
readable data to print to the website.

2.

WHAT TABLES NEED FIXING:

==============================================================================
   
    - Order.cs

    List<Book> :
    Orders can contain many books: Order(Id)--->OrderBooks<---Books(Id)

    ADD: OrderBooks.cs {
        Id
        OrderId
        BookId
    }
    
    REMOVE: List<Books> BooksList

==============================================================================

    - OrderHistory.cs

    Has a List<Order> which creates a column in Order(OrderHistoryId)

    REMOVE: List<Order> OrderList

==============================================================================

    - Payment.cs

    Seems to be a duplicate of CardDetails

    REMOVE: Payment.cs

==============================================================================

    - ReadBooks.cs

    Has a List<Book> ReadBooks which creates a column in Book(ReadBooksId)

    REMOVE: List<Book> ReadBooks

==============================================================================

    - UserBillingAddresses.cs

    Has a List<BillingAddress> Reviews which creates a column in 
    BillingAddress(UserBillingAddressesId)

    REMOVE: List<BillingAddress> Reviews

==============================================================================

    - UserCards.cs

    Has a List<CardDetails> CardList which creates a column in 
    CardDetails(CardListId)

    REMOVE: List<CardDetails> CardList

==============================================================================
 
    - UserReview.cs

    Has a List<Review> ReviewList which creates a column in 
    Review(ReviewListId)

    REMOVE: List<Review> ReviewList

==============================================================================
 
    - UserShippingAddresses.cs

    Has a List<ShippingAddress> ListAddress which creates a column in 
    ShippingAddress(ListAddressId)

    REMOVE: List<ShippingAddress> ListAddress

==============================================================================
 
    - Wishlist.cs

    Has a List<Book> WishList which creates a column in 
    Book(WishlistId)

    REMOVE: List<Book> WishList

==============================================================================
